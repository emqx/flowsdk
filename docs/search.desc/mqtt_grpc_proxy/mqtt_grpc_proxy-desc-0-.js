searchState.loadedDescShard("mqtt_grpc_proxy", 0, "QoS 1\nQoS 0\nAUTH packet: Authentication exchange (MQTT 5.0).\nCONNACK packet: Server acknowledges connection.\nCONNECT packet: Client requests connection to server.\nDISCONNECT packet: Client or server disconnects.\nQoS 2\nTop-level message representing any MQTT 5.0 control packet.\nNew streaming message wrapper\nPINGREQ packet: Client ping request.\nPINGRESP packet: Server ping response.\nRepresents a single MQTTv5 property.\nPUBACK packet: Acknowledges QoS 1 PUBLISH.\nPUBCOMP packet: Completes QoS 2.\nPUBLISH packet: Publishes a message.\nPUBREC packet: Acknowledges QoS 2 PUBLISH (step 1).\nPUBREL packet: Continues QoS 2 (step 2).\nEnum for MQTT QoS levels.\nResponse for unary RelayPacket RPC.\nSUBACK packet: Server acknowledges subscription.\nSUBSCRIBE packet: Client subscribes to topics.\nTopic subscription for SUBSCRIBE.\nUNSUBACK packet: Server acknowledges unsubscription.\nUNSUBSCRIBE packet: Client unsubscribes from topics.\nUser property (key-value pair).\nWill message for CONNECT packet.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nClean start flag.\nClient identifier (UTF-8 string).\nReturns the enum value of <code>control_type</code>, or the default if …\nReturns the enum value of <code>direction</code>, or the default if the …\nDuplicate delivery flag.\nOptional error message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>QoS</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>MessageDirection</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>QoS</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MessageDirection</code>.\nKeep-alive timer in seconds (16-bit).\nMessage ID (for QoS 1 or 2).\nMessage ID.\nMessage ID.\nMessage ID.\nMessage ID.\nMessage ID.\nMessage ID.\nMessage ID.\nMessage ID.\nNested message and enum types in <code>MqttPacket</code>.\nGenerated client implementations.\nGenerated server implementations.\nNested message and enum types in <code>MqttStreamMessage</code>.\nNo local delivery.\nPassword (optional, binary data).\nBinary payload.\nMQTT 5.0 properties.\nIncludes will_delay_interval, etc.\nMQTT 5.0 properties.\nMQTT 5.0 properties (e.g., content_type, topic_alias).\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties (e.g., subscription_identifier).\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties.\nMQTT 5.0 properties (e.g., authentication_method, …\nNested message and enum types in <code>Property</code>.\nProtocol name (e.g., “MQTT”).\nProtocol version (5 for MQTT 5.0).\nReturns the enum value of <code>qos</code>, or the default if the field …\nReturns the enum value of <code>qos</code>, or the default if the field …\nQuality of Service level.\nSubscription options (MQTT 5.0).\nReason code (e.g., 0x00 for success).\nReason code (e.g., 0x00 for success).\nReason code.\nReason code.\nReason code.\nReason code.\nReason code.\nReason codes for each topic subscription.\nReason codes for each topic.\nRetain flag.\nRetain handling.\nRetain handling option (0, 1, or 2).\nFor message ordering within session\nNested message and enum types in <code>SessionControl</code>.\nUnique identifier for this MQTT session\nSession present flag.\nSets <code>control_type</code> to the provided enum value.\nSets <code>direction</code> to the provided enum value.\nSets <code>qos</code> to the provided enum value.\nSets <code>qos</code> to the provided enum value.\nStatus of the relay operation (e.g., 0 for success).\nList of topic filters and their options.\nTopic name (UTF-8 string).\nList of topic filters to unsubscribe.\nUsername (optional).\nWill message (optional).\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\ngRPC service for relaying MQTT packets.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nmqtt auth RPC - authentication exchange (MQTT 5.0).\nmqtt disconnect RPC - graceful disconnection.\nmqtt pingreq RPC - client ping request.\nmqtt puback RPC - QoS 1 acknowledgment.\nmqtt pubcomp RPC - QoS 2 publish complete (step 3).\nmqtt publish RPC.\nmqtt pubrec RPC - QoS 2 publish received (step 1).\nmqtt pubrel RPC - QoS 2 publish release (step 2).\nmqtt suback RPC - server subscription acknowledgment.\nmqtt subscribe RPC.\nmqtt unsuback RPC - server unsubscription acknowledgment.\nmqtt unsubscribe RPC.\nLegacy unary RPCs (for backward compatibility)\nCompress requests with the given encoding.\nBidirectional streaming - one stream per MQTT connection\nGenerated trait containing gRPC methods that should be …\ngRPC service for relaying MQTT packets.\nGenerated gRPC service name\nServer streaming response type for the StreamMqttMessages …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nmqtt auth RPC - authentication exchange (MQTT 5.0).\nmqtt disconnect RPC - graceful disconnection.\nmqtt pingreq RPC - client ping request.\nmqtt puback RPC - QoS 1 acknowledgment.\nmqtt pubcomp RPC - QoS 2 publish complete (step 3).\nmqtt publish RPC.\nmqtt pubrec RPC - QoS 2 publish received (step 1).\nmqtt pubrel RPC - QoS 2 publish release (step 2).\nmqtt suback RPC - server subscription acknowledgment.\nmqtt subscribe RPC.\nmqtt unsuback RPC - server unsubscription acknowledgment.\nmqtt unsubscribe RPC.\nLegacy unary RPCs (for backward compatibility)\nCompress responses with the given encoding, if the client …\nBidirectional streaming - one stream per MQTT connection\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ControlType</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ControlType</code>.")