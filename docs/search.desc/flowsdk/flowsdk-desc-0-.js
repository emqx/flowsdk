searchState.loadedDescShard("flowsdk", 0, "Configuration for the async client\nThread-safe, event-driven MQTT client\nConnection established with broker\nConnection lost (will attempt to reconnect if enabled)\nDisconnected from broker (reason code if available)\nError occurred during operation\nIncoming message received from broker\nEvents that can occur during MQTT client operation\nTrait for handling MQTT events Users implement this trait …\nTLS peer certificate received (for certificate validation)\nAll pending operations cleared (on reconnect with …\nPing response received\nMessage published successfully\nReconnection attempt started\nSubscription completed\nUnsubscription completed\nEnable automatic reconnection on connection loss\nEnable buffering of messages during disconnection\nQueue size for pending commands\nConnect to the MQTT broker (non-blocking)\nDisconnect from broker (non-blocking)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum size of message buffer\nMaximum number of reconnect attempts (0 = infinite)\nMaximum reconnect delay in milliseconds\nCreate a new async MQTT client\nCalled when connection to broker is established\nCalled when connection is lost unexpectedly\nCalled when disconnected from broker\nCalled when an error occurs\nCalled when an incoming message is received\nCalled when TLS peer certificate is received (for custom …\nCalled when pending operations are cleared (usually on …\nCalled when ping response is received\nCalled when a message is successfully published\nCalled when attempting to reconnect\nCalled when subscription is completed\nCalled when unsubscription is completed\nSend ping to broker (non-blocking)\nPublish a message (non-blocking)\nInitial reconnect delay in milliseconds\nEnable or disable automatic reconnection\nShutdown the client and wait for worker thread to finish\nSubscribe to a topic (non-blocking)\nUnsubscribe from topics (non-blocking)\nCreate a new async MQTT client with default configuration\nClear all pending operations (useful on reconnect with …\nRemove a pending publish operation (call when …\nRemove a pending subscribe operation (call when SUBACK …\nRemove a pending unsubscribe operation (call when UNSUBACK …\nSend CONNECT packet without waiting for CONNACK\nSend DISCONNECT packet without waiting (DISCONNECT has no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all pending publish packet IDs and their details\nGet all pending subscribe packet IDs and their topics\nGet all pending unsubscribe packet IDs and their topics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if authentication requires continuation …\nReturns true if the connection failed\nReturns true if re-authentication is requested (reason …\nReturns true if the connection was successful (reason code …\nReturns true if authentication was successful (reason code …\nSend PINGREQ packet without waiting for PINGRESP\nSend PUBLISH packet without waiting for …\nReturns a description of the reason code\nReturns a description of the authentication reason code\nSend SUBSCRIBE packet without waiting for SUBACK\nSend UNSUBSCRIBE packet without waiting for UNSUBACK\nSend UNSUBSCRIBE packet for single topic without waiting …\nAdd a single subscription topic\nSet whether to automatically acknowledge QoS 1 and QoS 2 …\nBuild the options (consumes self, no additional validation …\nCreate a new builder with default values\nSet the clean start flag\nSet the MQTT client ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the keep alive interval in seconds\nSet the password for authentication\nSet the broker peer address (host:port)\nSet whether to automatically reconnect on connection loss\nSet the session expiry interval in seconds (MQTT v5)\nSession Expiry Interval in seconds (MQTT v5 only)\nSet whether to use sessionless mode (no session state …\nSet topics to automatically subscribe to on connect\nSet the username for authentication\nSet the Last Will and Testament\nAuthentication challenge or response received (MQTT v5 …\nConnection established with broker\nConnection lost (will attempt to reconnect if enabled)\nDisconnected from broker (reason code if available)\nError occurred during operation\nIncoming message received from broker\nParse error occurred\nTLS peer certificate received (for certificate validation)\nAll pending operations cleared (on reconnect with …\nPing response received\nFully customizable publish command for MQTT v5\nMessage published successfully\nReconnection attempt started\nFully customizable subscribe command for MQTT v5\nSubscription completed\nConfiguration for the tokio async client\nTokio-based async MQTT client\nEvents that can occur during MQTT client operation\nTrait for handling MQTT events in async context\nFully customizable unsubscribe command for MQTT v5\nUnsubscription completed\nSend AUTH packet for enhanced authentication (MQTT v5)\nSend AUTH packet to continue authentication (reason code …\nSend AUTH packet to re-authenticate (reason code 0x19)\nEnable automatic reconnection on connection loss\nEnable buffering of messages during disconnection\nQueue size for pending commands\nConnect to the MQTT broker (non-blocking)\nConnect to broker and wait for CONNACK acknowledgment\nDisconnect from broker (non-blocking)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep alive interval in seconds\nMaximum size of message buffer\nMaximum number of reconnect attempts (0 = infinite)\nMaximum reconnect delay in milliseconds\nCreate a new tokio async MQTT client\nCalled when AUTH packet is received from broker (MQTT v5 …\nCalled when connection to broker is established\nCalled when connection is lost unexpectedly\nCalled when disconnected from broker\nCalled when an error occurs\nCalled when an incoming publish message is received\nCalled when TLS peer certificate is received (for custom …\nCalled when pending operations are cleared (usually on …\nCalled when ping response is received\nCalled when a message is successfully published\nCalled when attempting to reconnect\nCalled when subscription is completed\nCalled when unsubscription is completed\nSend ping to broker (non-blocking)\nSend ping and wait for PINGRESP acknowledgment\nPublish a message (non-blocking)\nPublish a message and wait for acknowledgment (QoS 1 = …\nPublish with fully customized command\nPublish with fully customized command and wait for …\nInitial reconnect delay in milliseconds\nRecv buffer size limit\nSend buffer size limit\nSend a raw MQTT packet to the broker (non-blocking)\nEnable or disable automatic reconnection\nShutdown the client\nSubscribe to a topic (non-blocking)\nSubscribe to topics and wait for SUBACK acknowledgment\nSubscribe with fully customized command\nSubscribe with fully customized command and wait for …\nEnable TCP_NODELAY (disable Nagle) on the underlying socket\nUnsubscribe from topics (non-blocking)\nUnsubscribe from topics and wait for UNSUBACK …\nUnsubscribe with fully customized command\nUnsubscribe with fully customized command and wait for …\nCreate a new async MQTT client with default configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the CONNACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttConnAck</code> packet.\nThe return code for the connection attempt.\nIf the Server accepts a connection with CleanSession set …\nRepresents the CONNECT packet in MQTT v3.1.1.\nRepresents the Will message and its properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nRepresents the PINGREQ packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingReq</code> packet.\nRepresents the PINGRESP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingResp</code> packet.\nRepresents the PUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREL packet that is being …\nCreates a new <code>MqttPubComp</code> packet.\nRepresents the PUBLISH packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPacket Identifier is only present for QoS levels 1 and 2.\nCreates a new <code>MqttPublish</code> packet.\nRepresents the PUBREC packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubRec</code> packet.\nRepresents the PUBREL packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREC packet that is being …\nCreates a new <code>MqttPubRel</code> packet.\nRepresents the SUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the SUBSCRIBE packet that is …\nCreates a new <code>MqttSubAck</code> packet.\nThe list of return codes. Each code corresponds to a topic …\nRepresents the SUBSCRIBE packet in MQTT v3.1.1.\nRepresents a subscription to a single topic in a SUBSCRIBE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the SUBSCRIBE …\nCreates a new <code>MqttSubscribe</code> packet.\nThe list of subscriptions for the session.\nRepresents the UNSUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the UNSUBSCRIBE packet that is …\nCreates a new <code>MqttUnsubAck</code> packet.\nRepresents the UNSUBSCRIBE packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the UNSUBSCRIBE …\nCreates a new <code>MqttUnsubscribe</code> packet.\nThe list of topic filters to which the Client wants to …\nRepresents the AUTH packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttAuth</code> packet.\nCreates an AUTH packet for continue authentication (reason …\nCreates an AUTH packet for continuing authentication with …\nCreates an AUTH packet for re-authentication with new …\nCreates an AUTH packet for re-authentication (reason code …\nCreates an AUTH packet for successful authentication …\nCreates an AUTH packet with authentication method and data.\nCreates an AUTH packet with only authentication method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nCreates a DISCONNECT packet for administrative action …\nCreates a DISCONNECT packet for implementation specific …\nCreates a DISCONNECT packet for keep alive timeout (reason …\nCreates a DISCONNECT packet for malformed packet error …\nCreates a DISCONNECT packet for message rate too high …\nCreates a new DISCONNECT packet with normal disconnection …\nCreates a DISCONNECT packet for not authorized (reason …\nCreates a DISCONNECT packet for packet too large (reason …\nCreates a DISCONNECT packet for payload format invalid …\nCreates a DISCONNECT packet for protocol error (reason …\nCreates a DISCONNECT packet for quota exceeded (reason …\nCreates a DISCONNECT packet for receive maximum exceeded …\nCreates a DISCONNECT packet for server busy (reason code …\nCreates a DISCONNECT packet for server shutting down …\nCreates a DISCONNECT packet for session taken over (reason …\nCreates a simple DISCONNECT with a specific reason code …\nCreates a DISCONNECT packet for topic alias invalid …\nCreates a DISCONNECT packet for topic filter invalid …\nCreates a DISCONNECT packet for topic name invalid (reason …\nCreates a DISCONNECT packet for unspecified error (reason …\nCreates a DISCONNECT packet with disconnect with Will …\nRepresents the PINGREQ packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGREQ packet.\nRepresents the PINGRESP packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGRESP packet.\nRepresents the PUBACK packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v5.0. PUBCOMP is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubComp</code> packet.\nCreates a PUBCOMP with an error reason code\nCreates a successful PUBCOMP with no properties (minimal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the PUBREC packet in MQTT v5.0. PUBREC is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRec</code> packet.\nCreates a PUBREC with an error reason code\nCreates a successful PUBREC with no properties (minimal …\nRepresents the PUBREL packet in MQTT v5.0. PUBREL is the …\nPUBREL is the only control packet that has fixed header …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRel</code> packet.\nCreates a PUBREL with an error reason code\nCreates a successful PUBREL with no properties (minimal …\nRepresents the SUBACK packet in MQTT v5.0. SUBACK is sent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttSubAck</code> packet.\nCreates a SUBACK with all subscriptions granted at the …\nCreates a SUBACK with mixed success and failure reason …\nCreates a SUBACK with specific reason codes but no …\nCreates a simple SUBACK with success codes for all …\nRepresents the SUBSCRIBE packet in MQTT v5.0. SUBSCRIBE is …\nRepresents a topic subscription with its options in MQTT …\nAdds a topic subscription to this SUBSCRIBE packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a topic subscription from bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new topic subscription with the specified …\nCreates a new <code>MqttSubscribe</code> packet.\nCreates a simple subscription with just QoS (other options …\nCreates a simple SUBSCRIBE packet with basic topic …\nEncodes this topic subscription to bytes for inclusion in …\nRepresents the UNSUBACK packet in MQTT v5.0. UNSUBACK is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubAck</code> packet.\nCreates an UNSUBACK with all unsubscriptions failed due to …\nCreates an UNSUBACK with mixed success and failure reason …\nCreates an UNSUBACK with specific reason codes but no …\nCreates a simple UNSUBACK with success codes for all …\nRepresents the UNSUBSCRIBE packet in MQTT v5.0. …\nAdds a topic filter to this UNSUBSCRIBE packet.\nUNSUBSCRIBE packets require fixed header flags to be 0010 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubscribe</code> packet.\nCreates a simple UNSUBSCRIBE packet with basic topic …\nCreates an UNSUBSCRIBE packet for a single topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stateful parser for a stream of MQTT data. It internally …\nAppends new data from the stream to the internal buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, empty parser.\nAttempts to parse a single MQTT packet from the internal …\nDetermines the MQTT version from the buffer if undefined\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")