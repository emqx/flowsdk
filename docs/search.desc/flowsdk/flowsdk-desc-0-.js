searchState.loadedDescShard("flowsdk", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the CONNACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttConnAck</code> packet.\nThe return code for the connection attempt.\nIf the Server accepts a connection with CleanSession set …\nRepresents the CONNECT packet in MQTT v3.1.1.\nRepresents the Will message and its properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nRepresents the PINGREQ packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingReq</code> packet.\nRepresents the PINGRESP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingResp</code> packet.\nRepresents the PUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREL packet that is being …\nCreates a new <code>MqttPubComp</code> packet.\nRepresents the PUBLISH packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPacket Identifier is only present for QoS levels 1 and 2.\nCreates a new <code>MqttPublish</code> packet.\nRepresents the PUBREC packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubRec</code> packet.\nRepresents the PUBREL packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREC packet that is being …\nCreates a new <code>MqttPubRel</code> packet.\nRepresents the SUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the SUBSCRIBE packet that is …\nCreates a new <code>MqttSubAck</code> packet.\nThe list of return codes. Each code corresponds to a topic …\nRepresents the SUBSCRIBE packet in MQTT v3.1.1.\nRepresents a subscription to a single topic in a SUBSCRIBE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the SUBSCRIBE …\nCreates a new <code>MqttSubscribe</code> packet.\nThe list of subscriptions for the session.\nRepresents the UNSUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the UNSUBSCRIBE packet that is …\nCreates a new <code>MqttUnsubAck</code> packet.\nRepresents the UNSUBSCRIBE packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the UNSUBSCRIBE …\nCreates a new <code>MqttUnsubscribe</code> packet.\nThe list of topic filters to which the Client wants to …\nRepresents the AUTH packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttAuth</code> packet.\nCreates an AUTH packet for continue authentication (reason …\nCreates an AUTH packet for continuing authentication with …\nCreates an AUTH packet for re-authentication with new …\nCreates an AUTH packet for re-authentication (reason code …\nCreates an AUTH packet for successful authentication …\nCreates an AUTH packet with authentication method and data.\nCreates an AUTH packet with only authentication method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nCreates a DISCONNECT packet for administrative action …\nCreates a DISCONNECT packet for implementation specific …\nCreates a DISCONNECT packet for keep alive timeout (reason …\nCreates a DISCONNECT packet for malformed packet error …\nCreates a DISCONNECT packet for message rate too high …\nCreates a new DISCONNECT packet with normal disconnection …\nCreates a DISCONNECT packet for not authorized (reason …\nCreates a DISCONNECT packet for packet too large (reason …\nCreates a DISCONNECT packet for payload format invalid …\nCreates a DISCONNECT packet for protocol error (reason …\nCreates a DISCONNECT packet for quota exceeded (reason …\nCreates a DISCONNECT packet for receive maximum exceeded …\nCreates a DISCONNECT packet for server busy (reason code …\nCreates a DISCONNECT packet for server shutting down …\nCreates a DISCONNECT packet for session taken over (reason …\nCreates a simple DISCONNECT with a specific reason code …\nCreates a DISCONNECT packet for topic alias invalid …\nCreates a DISCONNECT packet for topic filter invalid …\nCreates a DISCONNECT packet for topic name invalid (reason …\nCreates a DISCONNECT packet for unspecified error (reason …\nCreates a DISCONNECT packet with disconnect with Will …\nRepresents the PINGREQ packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGREQ packet.\nRepresents the PINGRESP packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGRESP packet.\nRepresents the PUBACK packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v5.0. PUBCOMP is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubComp</code> packet.\nCreates a PUBCOMP with an error reason code\nCreates a successful PUBCOMP with no properties (minimal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the PUBREC packet in MQTT v5.0. PUBREC is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRec</code> packet.\nCreates a PUBREC with an error reason code\nCreates a successful PUBREC with no properties (minimal …\nRepresents the PUBREL packet in MQTT v5.0. PUBREL is the …\nPUBREL is the only control packet that has fixed header …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRel</code> packet.\nCreates a PUBREL with an error reason code\nCreates a successful PUBREL with no properties (minimal …\nRepresents the SUBACK packet in MQTT v5.0. SUBACK is sent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttSubAck</code> packet.\nCreates a SUBACK with all subscriptions granted at the …\nCreates a SUBACK with mixed success and failure reason …\nCreates a SUBACK with specific reason codes but no …\nCreates a simple SUBACK with success codes for all …\nRepresents the SUBSCRIBE packet in MQTT v5.0. SUBSCRIBE is …\nRepresents a topic subscription with its options in MQTT …\nAdds a topic subscription to this SUBSCRIBE packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a topic subscription from bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new topic subscription with the specified …\nCreates a new <code>MqttSubscribe</code> packet.\nCreates a simple subscription with just QoS (other options …\nCreates a simple SUBSCRIBE packet with basic topic …\nEncodes this topic subscription to bytes for inclusion in …\nRepresents the UNSUBACK packet in MQTT v5.0. UNSUBACK is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubAck</code> packet.\nCreates an UNSUBACK with all unsubscriptions failed due to …\nCreates an UNSUBACK with mixed success and failure reason …\nCreates an UNSUBACK with specific reason codes but no …\nCreates a simple UNSUBACK with success codes for all …\nRepresents the UNSUBSCRIBE packet in MQTT v5.0. …\nAdds a topic filter to this UNSUBSCRIBE packet.\nUNSUBSCRIBE packets require fixed header flags to be 0010 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubscribe</code> packet.\nCreates a simple UNSUBSCRIBE packet with basic topic …\nCreates an UNSUBSCRIBE packet for a single topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stateful parser for a stream of MQTT data. It internally …\nAppends new data from the stream to the internal buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new, empty parser.\nAttempts to parse a single MQTT packet from the internal …\nDetermines the MQTT version from the buffer if undefined")