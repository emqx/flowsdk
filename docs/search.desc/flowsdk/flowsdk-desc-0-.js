searchState.loadedDescShard("flowsdk", 0, "Error types for MQTT client operations\nRaw Packet API - FOR TESTING ONLY\nTransport abstraction layer for MQTT connections\nConfiguration for the async client\nThread-safe, event-driven MQTT client\nConnection established with broker\nConnection lost (will attempt to reconnect if enabled)\nDisconnected from broker (reason code if available)\nError occurred during operation\nIncoming message received from broker\nEvents that can occur during MQTT client operation\nTrait for handling MQTT events Users implement this trait …\nTLS peer certificate received (for certificate validation)\nAll pending operations cleared (on reconnect with …\nPing response received\nMessage published successfully\nReconnection attempt started\nSubscription completed\nUnsubscription completed\nEnable automatic reconnection on connection loss\nEnable buffering of messages during disconnection\nQueue size for pending commands\nConnect to the MQTT broker (non-blocking)\nDisconnect from broker (non-blocking)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum size of message buffer\nMaximum number of reconnect attempts (0 = infinite)\nMaximum reconnect delay in milliseconds\nCreate a new async MQTT client\nCalled when connection to broker is established\nCalled when connection is lost unexpectedly\nCalled when disconnected from broker\nCalled when an error occurs\nCalled when an incoming message is received\nCalled when TLS peer certificate is received (for custom …\nCalled when pending operations are cleared (usually on …\nCalled when ping response is received\nCalled when a message is successfully published\nCalled when attempting to reconnect\nCalled when subscription is completed\nCalled when unsubscription is completed\nSend ping to broker (non-blocking)\nPublish a message (non-blocking)\nInitial reconnect delay in milliseconds\nEnable or disable automatic reconnection\nShutdown the client and wait for worker thread to finish\nSubscribe to a topic (non-blocking)\nUnsubscribe from topics (non-blocking)\nCreate a new async MQTT client with default configuration\nClear all pending operations (useful on reconnect with …\nRemove a pending publish operation (call when …\nRemove a pending subscribe operation (call when SUBACK …\nRemove a pending unsubscribe operation (call when UNSUBACK …\nSend CONNECT packet without waiting for CONNACK\nSend DISCONNECT packet without waiting (DISCONNECT has no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all pending publish packet IDs and their details\nGet all pending subscribe packet IDs and their topics\nGet all pending unsubscribe packet IDs and their topics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if authentication requires continuation …\nReturns true if the connection failed\nReturns true if re-authentication is requested (reason …\nReturns true if the connection was successful (reason code …\nReturns true if authentication was successful (reason code …\nSend PINGREQ packet without waiting for PINGRESP\nSend PUBLISH packet without waiting for …\nReturns a human-readable description for MQTT v5 reason …\nReturns a description of the reason code\nReturns a description of the authentication reason code\nReturns a description of the PUBACK/PUBREC reason code\nSend SUBSCRIBE packet without waiting for SUBACK\nSend UNSUBSCRIBE packet without waiting for UNSUBACK\nSend UNSUBSCRIBE packet for single topic without waiting …\nAlready connected to broker\nAuthentication failed\nBuffer is full, cannot accept more data\nInternal channel closed unexpectedly\nConnection lost unexpectedly\nConnection refused by broker with reason code\nContains the error value\nInternal client error (should not happen)\nInvalid client configuration\nInvalid or unexpected packet identifier\nOperation attempted in invalid connection state\nComprehensive error type for MQTT client operations\nType alias for Result with MqttClientError\nNetwork I/O error occurred\nNo active session available\nNot connected to broker\nContains the success value\nOperation was cancelled before completion\nOperation timed out waiting for response\nPacket ID space exhausted (all 65535 IDs in use)\nFailed to parse MQTT packet\nMQTT protocol violation detected\nPUBLISH operation failed\nSession expired on broker\nSUBSCRIBE operation failed\nReceived unexpected packet type\nUNSUBSCRIBE operation failed\nReturns the argument unchanged.\nConvert from io::Error with context\nConvert from ParseError\nConvert from ParseError with raw data\nCalls <code>U::from(self)</code>.\nReturns true if the error is related to authentication\nReturns true if the error is fatal (client should stop)\nReturns true if the error is recoverable (retry/reconnect …\nReturns true if the error should trigger automatic …\nGet a user-friendly error message\nAdd a single subscription topic\nSet whether to automatically acknowledge QoS 1 and QoS 2 …\nBuild the options (consumes self, no additional validation …\nCreate a new builder with default values\nSet the clean start flag\nSet the MQTT client ID\nDisable TLS (use plain TCP connection)\nEnable TLS with default system certificates (requires ‘…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the keep alive interval in seconds\nSet the maximum packet size in bytes (MQTT v5)\nMaximum Packet Size in bytes (MQTT v5 only)\nDisable maximum packet size limit\nSet the password for authentication\nSet the broker peer address (host:port)\nSet whether to automatically reconnect on connection loss\nRequest problem information in responses (MQTT v5)\nRequest Problem Information (MQTT v5 only)\nRequest response information from the server (MQTT v5)\nRequest Response Information (MQTT v5 only)\nSet the session expiry interval in seconds (MQTT v5)\nSession Expiry Interval in seconds (MQTT v5 only)\nSet whether to use sessionless mode (no session state …\nSet topics to automatically subscribe to on connect\nSet TLS configuration for encrypted connections (requires …\nTLS configuration for encrypted connections (requires ‘…\nSet the username for authentication\nSet the Last Will and Testament\nRaw packet builder for crafting arbitrary MQTT packets\nAppend raw bytes to the end of the packet\nBuild the final raw packet\nGet reference to the internal byte buffer\nGet mutable reference to the internal byte buffer\nCorrupt variable length encoding by setting MSB on a final …\nReturns the argument unchanged.\nCreate a raw packet builder from a valid packet\nInsert bytes at a specific position\nCalls <code>U::from(self)</code>.\nCheck if the packet is empty\nGet the current length of the packet\nMalformed packet generators for protocol compliance testing\nCreate a new empty raw packet builder\nRemove bytes at a specific position\nSet a specific byte at the given position\nModify the fixed header flags (lower 4 bits of first byte)\nModify the packet type (upper 4 bits of first byte)\nRaw TCP client for protocol testing\nTruncate packet to a specific length\nGenerator for malformed MQTT packets\nCreate CONNECT with Client ID longer than allowed\nCreate CONNECT packet with reserved flag bit set\nCreate PUBLISH with duplicate Topic Alias properties\nCreate PUBLISH with empty topic name (when topic alias not …\nReturns the argument unchanged.\nCreate CONNECT with incorrect protocol name\nCalls <code>U::from(self)</code>.\nCreate CONNACK with invalid protocol version\nCreate packet with invalid QoS (both bits set to 1)\nCreate packet with non-minimal variable length encoding\nCreate QoS 0 PUBLISH with packet identifier\nCreate packet with remaining length exceeding maximum\nCreate packet with reserved packet type\nCreate second CONNECT packet on same connection\nCreate SUBSCRIBE with reserved bits set in Subscription …\nCreate PUBLISH with Subscription Identifier = 0\nCreate PUBLISH with topic alias set to zero\nCreate PUBLISH with wildcard characters in topic name\nCreate valid CONNECT for testing (not malformed)\nCreate valid PINGREQ for testing (not malformed)\nCreate CONNECT with Will Flag set but no Will Payload\nRaw TCP client for sending and receiving malformed MQTT …\nClose the connection\nConnect to an MQTT broker using raw TCP\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if connection is still alive\nReceive raw bytes from the broker with timeout\nSend raw packet and read response\nSend raw packet and expect immediate disconnection\nSend raw bytes to the broker\nAuthentication challenge or response received (MQTT v5 …\nBuilder for TokioAsyncClientConfig\nConnection established with broker\nConnection lost (will attempt to reconnect if enabled)\nDisconnected from broker (reason code if available)\nError occurred during operation (enhanced with …\nIncoming message received from broker\nTopic name was not provided\nNo topics were added to the subscription\nParse error occurred with details\nTLS peer certificate received (for certificate validation)\nAll pending operations cleared (on reconnect with …\nPing response received\nError type for publish builder validation\nFully customizable publish command for MQTT v5\nBuilder for creating MQTT v5 publish commands\nMessage published successfully\nReconnection attempt started\nError type for builder validation\nFully customizable subscribe command for MQTT v5\nBuilder for creating complex MQTT v5 subscription commands\nSubscription completed\nConfiguration for the tokio async client\nTokio-based async MQTT client\nEvents that can occur during MQTT client operation\nTrait for handling MQTT events in async context\nFully customizable unsubscribe command for MQTT v5\nUnsubscription completed\nAdd a custom MQTT v5 property\nAdd a custom MQTT v5 property\nAdd a topic with QoS (uses default options)\nAdd a topic with full subscription options\nSend AUTH packet for enhanced authentication (MQTT v5)\nSend AUTH packet to continue authentication (reason code …\nSend AUTH packet to re-authenticate (reason code 0x19)\nEnable or disable automatic reconnection on connection loss\nEnable automatic reconnection on connection loss\nEnable or disable buffering of messages during …\nEnable buffering of messages during disconnection\nBuild the final PublishCommand\nBuild the final SubscribeCommand\nBuild the final configuration\nCreate a new builder for constructing a PublishCommand\nCreate a new builder for constructing a SubscribeCommand\nCreate a new configuration builder\nSet queue size for pending commands\nQueue size for pending commands\nConnect to the MQTT broker (non-blocking)\nConnect to broker and wait for CONNACK acknowledgment\nConnect with a custom timeout duration\nSet timeout for connect operation in milliseconds\nTimeout for connect operation in milliseconds (None = no …\nSet default timeout for operations without specific …\nDefault timeout for operations without specific timeout …\nReset all timeouts to their default values\nDisconnect from broker (non-blocking)\nSet the duplicate flag (usually managed automatically)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nApply a timeout profile optimized for internet/cloud …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet keep alive interval in seconds\nKeep alive interval in seconds\nApply a timeout profile optimized for local networks\nSet maximum size of message buffer\nMaximum size of message buffer\nSet maximum number of reconnect attempts (0 = infinite)\nMaximum number of reconnect attempts (0 = infinite)\nSet maximum reconnect delay in milliseconds\nMaximum reconnect delay in milliseconds\nCreate a new tokio async MQTT client\nCreate a new builder with default values\nCreate a new builder with default values\nCreate a new builder with default values\nDisable timeout for connect operation (wait indefinitely)\nDisable timeout for ping operation (wait indefinitely)\nDisable timeout for publish acknowledgment (wait …\nClear the Receive Maximum value (use MQTT v5 default of …\nDisable timeout for subscribe operation (wait indefinitely)\nDisable all operation timeouts (operations wait …\nDisable topic alias support\nDisable timeout for unsubscribe operation (wait …\nCalled when AUTH packet is received from broker (MQTT v5 …\nCalled when connection to broker is established\nCalled when connection is lost unexpectedly\nCalled when disconnected from broker\nCalled when an error occurs (enhanced with MqttClientError)\nCalled when an incoming publish message is received\nCalled when a parse error occurs with raw packet data for …\nCalled when TLS peer certificate is received (for custom …\nCalled when pending operations are cleared (usually on …\nCalled when ping response is received\nCalled when a message is successfully published\nCalled when attempting to reconnect\nCalled when subscription is completed\nCalled when unsubscription is completed\nSet the payload\nSend ping to broker (non-blocking)\nSend ping and wait for PINGRESP acknowledgment\nSend PINGREQ and wait for PINGRESP with a custom timeout …\nSet timeout for ping operation in milliseconds\nTimeout for ping operation in milliseconds (None = no …\nPublish a message (non-blocking)\nSet timeout for publish acknowledgment in milliseconds\nTimeout for publish acknowledgment in milliseconds (None = …\nPublish a message and wait for acknowledgment (QoS 1 = …\nPublish with a custom timeout duration\nPublish with fully customized command\nPublish with fully customized command and wait for …\nSet the Quality of Service level (0, 1, or 2)\nSet the Receive Maximum value for flow control (MQTT v5)\nMaximum number of QoS 1 and QoS 2 publications that the …\nSet initial reconnect delay in milliseconds\nInitial reconnect delay in milliseconds\nSet receive buffer size limit\nRecv buffer size limit\nSet the retain flag\nApply a timeout profile optimized for …\nSet send buffer size limit\nSend buffer size limit\nSend a raw MQTT packet to the broker (non-blocking)\nEnable or disable automatic reconnection\nShutdown the client\nSubscribe to a topic (non-blocking)\nSubscribe to topics and wait for SUBACK acknowledgment\nSubscribe with a custom timeout duration\nSet timeout for subscribe operation in milliseconds\nTimeout for subscribe operation in milliseconds (None = no …\nSubscribe with fully customized command\nSubscribe with fully customized command and wait for …\nEnable or disable TCP_NODELAY (disable Nagle algorithm)\nEnable TCP_NODELAY (disable Nagle) on the underlying socket\nSet the topic name\nSet the Topic Alias Maximum value\nMaximum number of topic aliases that the client accepts …\nUnsubscribe from topics (non-blocking)\nUnsubscribe from topics and wait for UNSUBACK …\nUnsubscribe with a custom timeout duration\nSet timeout for unsubscribe operation in milliseconds\nTimeout for unsubscribe operation in milliseconds (None = …\nUnsubscribe with fully customized command\nUnsubscribe with fully customized command and wait for …\nSet the Content Type property (MQTT v5)\nSet the Correlation Data property (MQTT v5)\nCreate a new async MQTT client with default configuration\nSet the Message Expiry Interval (MQTT v5)\nSet No Local flag for the last added topic\nSet the packet identifier (usually managed automatically)\nSet the packet identifier (usually managed automatically)\nSet the Response Topic property (MQTT v5)\nSet Retain As Published flag for the last added topic\nSet Retain Handling option for the last added topic\nSet the Subscription Identifier property\nSet the Topic Alias property (MQTT v5)\nAdd a User Property (MQTT v5)\nThe parse error that occurred\nFirst 100 bytes of raw data for debugging\nWhether this error is recoverable\nBoxed transport for dynamic dispatch\nTransport trait for different connection types\nError type for transport operations\nGracefully close the connection\nConnect to the specified address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the local address as a string\nGet the peer address as a string\nSet TCP_NODELAY option (no-op for non-TCP transports)\nTCP transport implementation\nTLS transport implementation\nTCP transport implementation\nReturns the argument unchanged.\nCreate a new TCP transport from an existing TcpStream\nGet a mutable reference to the underlying TcpStream\nGet a reference to the underlying TcpStream\nCalls <code>U::from(self)</code>.\nConsume self and return the underlying TcpStream\nTLS configuration options\nBuilder for TLS configuration\nTLS transport implementation\nAccept invalid certificates (⚠️ TESTING ONLY - …\nAccept invalid hostnames (⚠️ TESTING ONLY - insecure!)\nAdd a root CA certificate to trust\nBuild the TLS configuration\nCreate a new TLS configuration builder\nSet client identity for mutual TLS authentication\nClient identity for mutual TLS authentication\nCreate a TLS transport with custom configuration\nAccept invalid certificates\nAccept invalid hostnames\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the underlying TLS stream\nGet a reference to the underlying TLS stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional root CA certificates to trust\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the CONNACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttConnAck</code> packet.\nThe return code for the connection attempt.\nIf the Server accepts a connection with CleanSession set …\nRepresents the CONNECT packet in MQTT v3.1.1.\nRepresents the Will message and its properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nRepresents the PINGREQ packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingReq</code> packet.\nRepresents the PINGRESP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPingResp</code> packet.\nRepresents the PUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREL packet that is being …\nCreates a new <code>MqttPubComp</code> packet.\nRepresents the PUBLISH packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPacket Identifier is only present for QoS levels 1 and 2.\nCreates a new <code>MqttPublish</code> packet.\nRepresents the PUBREC packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBLISH packet that is …\nCreates a new <code>MqttPubRec</code> packet.\nRepresents the PUBREL packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the PUBREC packet that is being …\nCreates a new <code>MqttPubRel</code> packet.\nRepresents the SUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the SUBSCRIBE packet that is …\nCreates a new <code>MqttSubAck</code> packet.\nThe list of return codes. Each code corresponds to a topic …\nRepresents the SUBSCRIBE packet in MQTT v3.1.1.\nRepresents a subscription to a single topic in a SUBSCRIBE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the SUBSCRIBE …\nCreates a new <code>MqttSubscribe</code> packet.\nThe list of subscriptions for the session.\nRepresents the UNSUBACK packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier from the UNSUBSCRIBE packet that is …\nCreates a new <code>MqttUnsubAck</code> packet.\nRepresents the UNSUBSCRIBE packet in MQTT v3.1.1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Packet Identifier is used to correlate the UNSUBSCRIBE …\nCreates a new <code>MqttUnsubscribe</code> packet.\nThe list of topic filters to which the Client wants to …\nRepresents the AUTH packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttAuth</code> packet.\nCreates an AUTH packet for continue authentication (reason …\nCreates an AUTH packet for continuing authentication with …\nCreates an AUTH packet for re-authentication with new …\nCreates an AUTH packet for re-authentication (reason code …\nCreates an AUTH packet for successful authentication …\nCreates an AUTH packet with authentication method and data.\nCreates an AUTH packet with only authentication method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the DISCONNECT packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttDisconnect</code> packet.\nCreates a DISCONNECT packet for administrative action …\nCreates a DISCONNECT packet for implementation specific …\nCreates a DISCONNECT packet for keep alive timeout (reason …\nCreates a DISCONNECT packet for malformed packet error …\nCreates a DISCONNECT packet for message rate too high …\nCreates a new DISCONNECT packet with normal disconnection …\nCreates a DISCONNECT packet for not authorized (reason …\nCreates a DISCONNECT packet for packet too large (reason …\nCreates a DISCONNECT packet for payload format invalid …\nCreates a DISCONNECT packet for protocol error (reason …\nCreates a DISCONNECT packet for quota exceeded (reason …\nCreates a DISCONNECT packet for receive maximum exceeded …\nCreates a DISCONNECT packet for server busy (reason code …\nCreates a DISCONNECT packet for server shutting down …\nCreates a DISCONNECT packet for session taken over (reason …\nCreates a simple DISCONNECT with a specific reason code …\nCreates a DISCONNECT packet for topic alias invalid …\nCreates a DISCONNECT packet for topic filter invalid …\nCreates a DISCONNECT packet for topic name invalid (reason …\nCreates a DISCONNECT packet for unspecified error (reason …\nCreates a DISCONNECT packet with disconnect with Will …\nRepresents the PINGREQ packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGREQ packet.\nRepresents the PINGRESP packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PINGRESP packet.\nRepresents the PUBACK packet in MQTT v5.0.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubAck</code> packet.\nRepresents the PUBCOMP packet in MQTT v5.0. PUBCOMP is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubComp</code> packet.\nCreates a PUBCOMP with an error reason code\nCreates a successful PUBCOMP with no properties (minimal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the PUBREC packet in MQTT v5.0. PUBREC is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRec</code> packet.\nCreates a PUBREC with an error reason code\nCreates a successful PUBREC with no properties (minimal …\nRepresents the PUBREL packet in MQTT v5.0. PUBREL is the …\nPUBREL is the only control packet that has fixed header …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttPubRel</code> packet.\nCreates a PUBREL with an error reason code\nCreates a successful PUBREL with no properties (minimal …\nRepresents the SUBACK packet in MQTT v5.0. SUBACK is sent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttSubAck</code> packet.\nCreates a SUBACK with all subscriptions granted at the …\nCreates a SUBACK with mixed success and failure reason …\nCreates a SUBACK with specific reason codes but no …\nCreates a simple SUBACK with success codes for all …\nRepresents the SUBSCRIBE packet in MQTT v5.0. SUBSCRIBE is …\nRepresents a topic subscription with its options in MQTT …\nAdds a topic subscription to this SUBSCRIBE packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a topic subscription from bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new topic subscription with the specified …\nCreates a new <code>MqttSubscribe</code> packet.\nCreates a simple subscription with just QoS (other options …\nCreates a simple SUBSCRIBE packet with basic topic …\nEncodes this topic subscription to bytes for inclusion in …\nRepresents the UNSUBACK packet in MQTT v5.0. UNSUBACK is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubAck</code> packet.\nCreates an UNSUBACK with all unsubscriptions failed due to …\nCreates an UNSUBACK with mixed success and failure reason …\nCreates an UNSUBACK with specific reason codes but no …\nCreates a simple UNSUBACK with success codes for all …\nRepresents the UNSUBSCRIBE packet in MQTT v5.0. …\nAdds a topic filter to this UNSUBSCRIBE packet.\nUNSUBSCRIBE packets require fixed header flags to be 0010 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MqttUnsubscribe</code> packet.\nCreates a simple UNSUBSCRIBE packet with basic topic …\nCreates an UNSUBSCRIBE packet for a single topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stateful parser for a stream of MQTT data. It internally …\nAppends new data from the stream to the internal buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, empty parser.\nAttempts to parse a single MQTT packet from the internal …\nDetermines the MQTT version from the buffer if undefined\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")