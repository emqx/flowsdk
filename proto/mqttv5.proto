syntax = "proto3";

package mqttv5;

// Top-level message representing any MQTT 5.0 control packet.
message MqttPacket {
  oneof packet {
    Connect connect = 1;
    Connack connack = 2;
    Publish publish = 3;
    Puback puback = 4;
    Pubrec pubrec = 5;
    Pubrel pubrel = 6;
    Pubcomp pubcomp = 7;
    Subscribe subscribe = 8;
    Suback suback = 9;
    Unsubscribe unsubscribe = 10;
    Unsuback unsuback = 11;
    Pingreq pingreq = 12;
    Pingresp pingresp = 13;
    Disconnect disconnect = 14;
    Auth auth = 15;
  }
}

// Represents a single MQTTv5 property.
message Property {
    oneof property_type {
        bool payload_format_indicator = 1;
        uint32 message_expiry_interval = 2;
        string content_type = 3;
        string response_topic = 4;
        bytes correlation_data = 5;
        uint32 subscription_identifier = 6;
        uint32 session_expiry_interval = 7;
        string assigned_client_identifier = 8;
        uint32 server_keep_alive = 9;
        string authentication_method = 10;
        bytes authentication_data = 11;
        bool request_problem_information = 12;
        uint32 will_delay_interval = 13;
        bool request_response_information = 14;
        string response_information = 15;
        string server_reference = 16;
        string reason_string = 17;
        uint32 receive_maximum = 18;
        uint32 topic_alias_maximum = 19;
        uint32 topic_alias = 20;
        uint32 maximum_qos = 21;
        bool retain_available = 22;
        UserProperty user_property = 23;
        uint32 maximum_packet_size = 24;
        bool wildcard_subscription_available = 25;
        bool subscription_identifiers_available = 26;
        bool shared_subscription_available = 27;
    }
}

// User property (key-value pair).
message UserProperty {
  string key = 1;
  string value = 2;
}

// CONNECT packet: Client requests connection to server.
message Connect {
  // Client identifier (UTF-8 string).
  string client_id = 1;
  // Protocol name (e.g., "MQTT").
  string protocol_name = 2;
  // Protocol version (5 for MQTT 5.0).
  uint32 protocol_version = 3;
  // Clean start flag.
  bool clean_start = 4;
  // Keep-alive timer in seconds (16-bit).
  uint32 keep_alive = 5;
  // Username (optional).
  string username = 6;
  // Password (optional, binary data).
  bytes password = 7;
  // Will message (optional).
  Will will = 8;
  // MQTT 5.0 properties.
  repeated Property properties = 9;
}

// Will message for CONNECT packet.
message Will {
  string topic = 1;
  bytes payload = 2;
  QoS qos = 3;
  bool retain = 4;
  repeated Property properties = 5; // Includes will_delay_interval, etc.
}

// CONNACK packet: Server acknowledges connection.
message Connack {
  // Session present flag.
  bool session_present = 1;
  // Reason code (e.g., 0x00 for success).
  uint32 reason_code = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// PUBLISH packet: Publishes a message.
message Publish {
  // Topic name (UTF-8 string).
  string topic = 1;
  // Message ID (for QoS 1 or 2).
  uint32 message_id = 2;
  // Quality of Service level.
  QoS qos = 3;
  // Retain flag.
  bool retain = 4;
  // Duplicate delivery flag.
  bool dup = 5;
  // Binary payload.
  bytes payload = 6;
  // MQTT 5.0 properties (e.g., content_type, topic_alias).
  repeated Property properties = 7;
}

// PUBACK packet: Acknowledges QoS 1 PUBLISH.
message Puback {
  // Message ID.
  uint32 message_id = 1;
  // Reason code (e.g., 0x00 for success).
  uint32 reason_code = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// PUBREC packet: Acknowledges QoS 2 PUBLISH (step 1).
message Pubrec {
  // Message ID.
  uint32 message_id = 1;
  // Reason code.
  uint32 reason_code = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// PUBREL packet: Continues QoS 2 (step 2).
message Pubrel {
  // Message ID.
  uint32 message_id = 1;
  // Reason code.
  uint32 reason_code = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// PUBCOMP packet: Completes QoS 2.
message Pubcomp {
  // Message ID.
  uint32 message_id = 1;
  // Reason code.
  uint32 reason_code = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// SUBSCRIBE packet: Client subscribes to topics.
message Subscribe {
  // Message ID.
  uint32 message_id = 1;
  // List of topic filters and their options.
  repeated TopicSubscription subscriptions = 2;
  // MQTT 5.0 properties (e.g., subscription_identifier).
  repeated Property properties = 3;
}

// Topic subscription for SUBSCRIBE.
message TopicSubscription {
  string topic_filter = 1;
  // Subscription options (MQTT 5.0).
  uint32 qos = 2; // QoS level (0, 1, or 2).
  bool no_local = 3; // No local delivery.
  bool retain_as_published = 4; // Retain handling.
  uint32 retain_handling = 5; // Retain handling option (0, 1, or 2).
}

// SUBACK packet: Server acknowledges subscription.
message Suback {
  // Message ID.
  uint32 message_id = 1;
  // Reason codes for each topic subscription.
  repeated uint32 reason_codes = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// UNSUBSCRIBE packet: Client unsubscribes from topics.
message Unsubscribe {
  // Message ID.
  uint32 message_id = 1;
  // List of topic filters to unsubscribe.
  repeated string topic_filters = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// UNSUBACK packet: Server acknowledges unsubscription.
message Unsuback {
  // Message ID.
  uint32 message_id = 1;
  // Reason codes for each topic.
  repeated uint32 reason_codes = 2;
  // MQTT 5.0 properties.
  repeated Property properties = 3;
}

// PINGREQ packet: Client ping request.
message Pingreq {
  // No fields (empty packet).
}

// PINGRESP packet: Server ping response.
message Pingresp {
  // No fields (empty packet).
}

// DISCONNECT packet: Client or server disconnects.
message Disconnect {
  // Reason code.
  uint32 reason_code = 1;
  // MQTT 5.0 properties.
  repeated Property properties = 2;
}

// AUTH packet: Authentication exchange (MQTT 5.0).
message Auth {
  // Reason code.
  uint32 reason_code = 1;
  // MQTT 5.0 properties (e.g., authentication_method, authentication_data).
  repeated Property properties = 2;
}

// Enum for MQTT QoS levels.
enum QoS {
  AT_MOST_ONCE = 0;  // QoS 0
  AT_LEAST_ONCE = 1; // QoS 1
  EXACTLY_ONCE = 2;  // QoS 2
}

// gRPC service for relaying MQTT packets.
service MqttRelayService {
  // Relay an MQTT packet (unary RPC).
  rpc RelayPacket(MqttPacket) returns (RelayResponse);

  // Relay a batch of MQTT packets (server streaming RPC).
  // rpc BatchRelayPackets(stream MqttPacket) returns (stream RelayResponse);

  // Bidirectional streaming RPC for continuous packet relay.
  // rpc StreamPackets(stream MqttPacket) returns (stream MqttPacket);

  // mqtt connect RPC.
  rpc MQTTConnect(mqttv5.Connect) returns (mqttv5.Connack);

  // mqtt publish RPC.
  rpc MQTTPublishQos1(mqttv5.Publish) returns (mqttv5.Puback);

  // mqtt subscribe RPC.
  rpc MQTTSubscribe(mqttv5.Subscribe) returns (mqttv5.Suback);

  // mqtt suback RPC - server subscription acknowledgment.
  rpc MQTTSuback(mqttv5.Suback) returns (RelayResponse);

  // mqtt unsubscribe RPC.
  rpc MQTTUnsubscribe(mqttv5.Unsubscribe) returns (mqttv5.Unsuback);

  // mqtt unsuback RPC - server unsubscription acknowledgment.
  rpc MQTTUnsuback(mqttv5.Unsuback) returns (RelayResponse);

  // mqtt puback RPC - QoS 1 acknowledgment.
  rpc MQTTPuback(mqttv5.Puback) returns (RelayResponse);

  // mqtt pubrec RPC - QoS 2 publish received (step 1).
  rpc MQTTPubrec(mqttv5.Pubrec) returns (mqttv5.Pubrel);

  // mqtt pubrel RPC - QoS 2 publish release (step 2).
  rpc MQTTPubrel(mqttv5.Pubrel) returns (mqttv5.Pubcomp);

  // mqtt pubcomp RPC - QoS 2 publish complete (step 3).
  rpc MQTTPubcomp(mqttv5.Pubcomp) returns (RelayResponse);

  // mqtt pingreq RPC - client ping request.
  rpc MQTTPingreq(mqttv5.Pingreq) returns (mqttv5.Pingresp);

  // mqtt disconnect RPC - graceful disconnection.
  rpc MQTTDisconnect(mqttv5.Disconnect) returns (RelayResponse);

  // mqtt auth RPC - authentication exchange (MQTT 5.0).
  rpc MQTTAuth(mqttv5.Auth) returns (mqttv5.Auth);
}

// Response for unary RelayPacket RPC.
message RelayResponse {
  // Status of the relay operation (e.g., 0 for success).
  uint32 status_code = 1;
  // Optional error message.
  string error_message = 2;
}